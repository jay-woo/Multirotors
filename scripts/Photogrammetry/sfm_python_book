def structure_from_python(n_stills):
    #calibration
    K = np.array([[2394,0,932],[0,2398,628],[0,0,1]])

    img1 = 'Motion_Image' + str(1) + '.png'
    #im1 = np.array(Image.open(img1))
    sift.process_image(img1,'im1.sift')
    l1,d1 = sift.read_features_from_file('im1.sift')

    img2 = 'Motion_Image' + str(2) + '.png'
    #im2 = np.array(Image.open(img2))
    sift.process_image(img2,'im2.sift')
    l2,d2 = sift.read_features_from_file('im2.sift')

    matches = sift.match_twosided(d1,d2)
    ndx = matches.nonzero()[0]

    # make homogeneous and normalize with inv(K)
    x1 = homography.make_homog(l1[ndx,:2].T)
    ndx2 = [int(matches[i]) for i in ndx]
    x2 = homography.make_homog(l2[ndx2,:2].T)
    x1n = dot(inv(K),x1)
    x2n = dot(inv(K),x2)
    # estimate E with RANSAC
    model = sfm.RansacModel()
    E,inliers = sfm.F_from_ransac(x1n,x2n,model)
    # compute camera matrices (P2 will be list of four solutions)
    P1 = array([[1,0,0,0],[0,1,0,0],[0,0,1,0]])
    P2 = sfm.compute_P_from_essential(E)

    # pick the solution with points in front of cameras
    ind = 0
    maxres = 0
    for i in range(4):
    # triangulate inliers and compute depth for each camera
        X = sfm.triangulate(x1n[:,inliers],x2n[:,inliers],P1,P2[i])
        d1 = dot(P1,X)[2]
        d2 = dot(P2[i],X)[2]
        if sum(d1>0)+sum(d2>0) > maxres:
            maxres = sum(d1>0)+sum(d2>0)
            ind = i
            infront = (d1>0) & (d2>0)
    # triangulate inliers and remove points not in front of both cameras
    X = sfm.triangulate(x1n[:,inliers],x2n[:,inliers],P1,P2[ind])
    X = X[:,infront]

    # 3D plot
    from mpl_toolkits.mplot3d import axes3d
    fig = plt.figure()
    ax = fig.gca(projection='3d')
    ax.plot(-X[0],X[1],X[2],'k.')
    plt.axis('off')

    # plot the projection of X
    import camera
    # project 3D points
    cam1 = camera.Camera(P1)
    cam2 = camera.Camera(P2[ind])
    x1p = cam1.project(X)
    x2p = cam2.project(X)
    # reverse K normalization
    x1p = dot(K,x1p)
    x2p = dot(K,x2p)
    plt.figure()
    plt.imshow(im1)
    plt.gray()
    plt.plot(x1p[0],x1p[1],'o')
    plt.plot(x1[0],x1[1],'r.')
    plt.axis('off')
    plt.figure()
    plt.imshow(im2)
    plt.gray()
    plt.plot(x2p[0],x2p[1],'o')
    plt.plot(x2[0],x2[1],'r.')
    plt.axis('off')
    plt.show()
